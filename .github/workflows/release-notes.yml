name: Generate Release Notes and Create PR

on:
  push:
    branches:
      - 'version/*.*.*'

jobs:
  release-notes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Extract version from branch name
        id: extract_version
        run: |
          branch_name=$(echo "${GITHUB_REF#refs/heads/}")
          version=${branch_name#version/}
          echo "VERSION=${version}" >> $GITHUB_ENV

      - name: Get latest release version
        id: get_latest_release
        run: |
          latest_release=$(gh release view --json tagName -q '.tagName' || echo "none")
          echo "LATEST_RELEASE=${latest_release}" >> $GITHUB_ENV

      - name: Find merged PRs since last release
        id: merged_prs
        uses: actions/github-script@v6
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 100,
              base: 'main', // Adjust if necessary
            });

            const lastReleaseTag = process.env.LATEST_RELEASE;
            const lastRelease = lastReleaseTag === "none" ? null : await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: lastReleaseTag,
            });

            const lastReleaseDate = lastRelease ? new Date(lastRelease.data.published_at) : new Date(0);

            const mergedPrs = prs.filter(pr => 
              pr.merged_at && new Date(pr.merged_at) > lastReleaseDate
            );

            const prDetails = mergedPrs.map(pr => `- [#${pr.number}](${pr.html_url}): ${pr.title}`).join('\n');
            core.setOutput('merged_prs', prDetails || 'None');

      - name: Find open PRs
        id: open_prs
        uses: actions/github-script@v6
        with:
          script: |
            const { data: openPrs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'desc',
              per_page: 100,
            });

            const openPrDetails = openPrs.map(pr => `- [#${pr.number}](${pr.html_url}): ${pr.title}`).join('\n');
            core.setOutput('open_prs', openPrDetails || 'None');

      - name: Generate release notes
        id: generate_notes
        run: |
          merged_prs="${{ steps.merged_prs.outputs.merged_prs }}"
          open_prs="${{ steps.open_prs.outputs.open_prs }}"
          release_notes="## Release Notes for ${{ env.VERSION }}\n\n"
          release_notes+="### Merged Pull Requests Since Last Release\n$merged_prs\n\n"
          release_notes+="### Open Pull Requests\n$open_prs"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$release_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create a pull request
        id: create_pr
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/pulls
          owner: ${{ github.repository_owner }}
          repo: ${{ github.repository }}
          title: "Version ${{ env.VERSION }}"
          head: "version/${{ env.VERSION }}"
          base: "main"  # Adjust if necessary
          body: |
            ${{ env.RELEASE_NOTES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add 'needs review' label
        run: |
          pr_number=$(gh pr list --search "Version ${{ env.VERSION }}" --json number -q '.[0].number')
          if [ -n "$pr_number" ]; then
            gh pr edit "$pr_number" --add-label "needs review"
          else
            echo "No PR found with the title 'Version ${{ env.VERSION }}'"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
