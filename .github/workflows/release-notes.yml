name: Release workflow

on:
  push:
#    branches:
#      - 'version/*.*.*'

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find previous release version
        uses: actions/github-script@v6
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed', // Only look at closed PRs
              sort: 'updated',
              direction: 'desc',
              per_page: 100 // Adjust as needed
            });

            // Find the last merged PR with a name matching "Version x.x.x" or branch name "version/x.x.x"
            const pr = prs.find(pr => 
              (pr.merged_at && pr.title.startsWith('Version ')) || 
              pr.head.ref.startsWith('version/')
            );

            if (pr) {
              console.log(`Found PR: #${pr.number} - ${pr.title}`);
              core.setOutput('pr_number', pr.number);
              core.setOutput('pr_title', pr.title);
              core.setOutput('pr_url', pr.html_url);
            } else {
              console.log('No matching PR found');
              core.setOutput('pr_number', 'none');
              core.setOutput('pr_title', 'none');
              core.setOutput('pr_url', 'none');
            }

#      - name: Build Release Notes
#
#      - name: Create PR
#        uses: actions/github-script@v6
#        with:
#          script: |
#            const { repo, owner } = context.repo;
#            const branchName = process.env.branch_name;
#            const baseBranch = process.env.base_branch_name;
#            const pulls = await github.rest.pulls.list({
#              owner: owner,
#              repo: repo,
#              head: `${owner}:${branchName}`,
#              base: baseBranch,
#              state: 'open',
#            });
#
#            let prNumber;
#
#            if (pulls.data.length < 1) {
#              const newPR = await github.rest.pulls.create({
#                title: 'New Crowdin Translations',
#                owner: owner,
#                repo: repo,
#                head: branchName,
#                base: baseBranch,
#                body: `New Crowdin translations by Github Action last synchronization: ${process.env.current_date}`,
#              });
#              prNumber = newPR.data.number;
#            } else {
#              prNumber = pulls.data[0].number;
#            }
#
#            if (prNumber) {
#              await github.rest.issues.addLabels({
#                owner: owner,
#                repo: repo,
#                issue_number: prNumber,
#                labels: ['needs review', 'localization']
#              });
#            }