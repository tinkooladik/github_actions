name: Generate Release Notes and Create PR

on:
  push:
    branches:
      - 'version/*.*.*'

jobs:
  release-notes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Extract version from branch name
        id: extract_version
        run: |
          branch_name=$(echo "${GITHUB_REF#refs/heads/}")
          version=${branch_name#version/}
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${branch_name}" >> $GITHUB_ENV

      - name: Get latest release version
        id: get_latest_release
        run: |
          latest_release=$(gh release view --json tagName -q '.tagName' || echo "none")
          echo "LATEST_RELEASE=${latest_release}" >> $GITHUB_ENV

      - name: Find merged PRs since last release
        id: merged_prs
        uses: actions/github-script@v6
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 100,
              base: 'main',
            });

            const lastReleaseTag = process.env.LATEST_RELEASE;
            const lastRelease = lastReleaseTag === "none" ? null : await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: lastReleaseTag,
            });

            const lastReleaseDate = lastRelease ? new Date(lastRelease.data.published_at) : new Date(0);

            const mergedPrs = prs.filter(pr => 
              pr.merged_at && new Date(pr.merged_at) > lastReleaseDate
            );

            const prDetails = mergedPrs.map(pr => `- ${pr.html_url}`).join('\n');
            core.setOutput('merged_prs', prDetails || 'None');

      - name: Find open PRs
        id: open_prs
        uses: actions/github-script@v6
        with:
          script: |
            const { data: openPrs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'desc',
              per_page: 100,
            });

            const openPrDetails = openPrs.map(pr => `- ${pr.html_url}`).join('\n');
            core.setOutput('open_prs', openPrDetails || 'None');

      - name: Generate release notes
        id: generate_notes
        run: |
          merged_prs="${{ steps.merged_prs.outputs.merged_prs }}"
          open_prs="${{ steps.open_prs.outputs.open_prs }}"
          release_notes="# Version ${{ env.VERSION }}".join('\n\n')
          release_notes+="## Release Notes".join('\n\n')
          release_notes+="$merged_prs".join('\n\n')
          release_notes+="## Open Pull Requests".join('\n\n')
          release_notes+="$open_prs"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$release_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create PR
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const branchName = process.env.branch_name;
            const version = process.env.VERSION;
            const releaseNotes = process.env.RELEASE_NOTES;

            // Create a new PR
            const { data: newPr } = await github.rest.pulls.create({
              owner: owner,
              repo: repo,
              title: `Version ${version}`,
              head: branchName,
              base: "main",
              body: releaseNotes,
            });

            console.log(`Created PR #${newPr.number}`);
            
            await github.rest.issues.addLabels({
              owner: owner,
              repo: repo,
              issue_number: newPr.number,
              labels: ['needs review'],
            });

            console.log(`Added 'needs review' label to PR #${newPr.number}`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          branch_name: ${{ env.BRANCH_NAME }}
          VERSION: ${{ env.VERSION }}
          RELEASE_NOTES: ${{ env.RELEASE_NOTES }}
# version 0.2.9