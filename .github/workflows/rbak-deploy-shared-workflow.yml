name: RBAK shared deploy workflow

on:
  workflow_call:
    inputs:
      artifact-id:
        type: string
        required: true
      group-id:
        type: string
        required: false
        default: 'com.redbull'
      publication-name:
        type: string
        required: false
        default: 'Release'
        description: 'A PubName specified in maven-publish gradle plugin'
      repo-name:
        type: string
        required: false
        default: 'GitHubPackages'
      delete-alphas:
        type: boolean
        required: false
        default: true

jobs:
  release_shared:
    is_merged: github.event.pull_request.merged
    is_version_branch: startsWith(github.event.pull_request.head.ref, 'version/')
    has_approved_label: contains(github.event.pull_request.labels.*.name, 'approved')

    if: is_merged && is_version_branch && has_approved_label
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Extract version name
        id: extract_version_name
        shell: bash
        run: |
          branch=${{ github.event.pull_request.head.ref }}
          echo "VERSION=$(echo "${branch#"${branch%%[0-9]*}"}")" >> $GITHUB_ENV

      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

#      - name: Setup Gradle
#        uses: gradle/actions/setup-gradle@v3
#
#      - name: Building Android aar
#        run: ./gradlew assembleRelease
#        env:
#          GITHUB_ACTOR: ${{ env.GITHUB_ACTOR }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Publishing Android aar
#        run: ./gradlew publish${{ inputs.publication-name }}PublicationTo${{ inputs.repo-name }}Repository
#        env:
#          GITHUB_ACTOR: ${{ env.GITHUB_ACTOR }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=${{ env.VERSION }}
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Generate Release notes
        id: generate_notes
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const tagName = '${{ env.VERSION }}';

            // Fetch the latest release
            const { data: latestRelease } = await github.rest.repos.getLatestRelease({
              owner,
              repo
            });
            
            // Generate release notes
            const { data: releaseNotes } = await github.rest.repos.generateReleaseNotes({
              owner,
              repo,
              tag_name: tagName,
              previous_tag_name: latestRelease.tag_name
            });
            
            console.log(`Generated release notes: ${releaseNotes.body}`);
            core.setOutput('release_notes', releaseNotes.body);

      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const tagName = '${{ env.VERSION }}';
            const releaseNotes = `${{ steps.generate_notes.outputs.release_notes }}`;
            
            // Create the release
            const { data: release } = await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tagName,
              name: `Release ${tagName}`,
              body: releaseNotes
            });
            
            console.log(`Created release #${release.id} with tag ${tagName}`);
#
#      - name: Delete pre-release versions
#        if: ${{ inputs.delete-alphas }}
#        uses: actions/delete-package-versions@v5
#        with:
#          package-name: ${{ inputs.group-id }}.${{ inputs.artifact-id }}
#          package-type: 'maven'
#          min-versions-to-keep: 0
#          delete-only-pre-release-versions: "true"

#      - name: List all package versions
#        run: |
#          gh pkg list OWNER/REPOSITORY
#        env:
#          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

## version 2