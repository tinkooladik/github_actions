name: Push Tag and create a GitHub release with generated  Release Notes
description: Shared action that can be used for both rbak sdks and client apps deployment
inputs:
  GITHUB_TOKEN:
    description: standard secrets.GITHUB_TOKEN can be used
    required: true

runs:
  using: "composite"
  steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Extract version from branch name
      shell: bash
      id: extract_version
      run: |
        branch_name=$(echo "${GITHUB_REF#refs/heads/}")
        version=${branch_name#version/}
        echo "VERSION=${version}" >> $GITHUB_ENV
        echo "BRANCH_NAME=${branch_name}" >> $GITHUB_ENV

    - name: Push Tag
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        TAG_NAME=${{ env.VERSION }}
        git tag $TAG_NAME
        git push origin $TAG_NAME

    - name: Generate Release Notes
      id: generate_notes
      uses: actions/github-script@v7
      with:
        script: |
          const { repo, owner } = context.repo;
          const tagName = '${{ env.VERSION }}';

          // Fetch the latest release
          let latestRelease;
          try {
            const { data } = await github.rest.repos.getLatestRelease({
              owner,
              repo
            });
            latestRelease = data.tag_name;
          } catch (error) {
              latestRelease = null;
          }
          
          // Generate release notes
          const params = {
            owner,
            repo,
            tag_name: tagName
          };
          
          // Only add previous_tag_name if latestRelease is available
          if (latestRelease != null) {
            params.previous_tag_name = latestRelease;
          }
          
          const { data: releaseNotes } = await github.rest.repos.generateReleaseNotes(params);
          
          console.log(`Generated release notes: ${releaseNotes.body}`);
          core.setOutput('release_notes', releaseNotes.body);

    - name: Create Release
      id: create_release
      uses: actions/github-script@v7
      with:
        script: |
          const { repo, owner } = context.repo;
          const tagName = '${{ env.VERSION }}';
          const releaseNotes = `${{ steps.generate_notes.outputs.release_notes }}`;
          
          // Create the release
          const { data: release } = await github.rest.repos.createRelease({
            owner,
            repo,
            tag_name: tagName,
            name: `Version ${tagName}`,
            body: releaseNotes
          });
          
          console.log(`Created release #${release.id} with tag ${tagName}`);
